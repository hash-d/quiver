#!/usr/bin/env python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import os
import signal
import sys

home = os.environ.get("QUIVER_HOME", "@default_home@")
sys.path.insert(0, os.path.join(home, "python"))

from plano import *
from quiver.common import *

config_template = """
<?xml version="1.0"?>
<configuration xmlns="urn:activemq" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">
  <core xmlns="urn:activemq:core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:activemq:core">
    <persistence-enabled>false</persistence-enabled>
    <security-enabled>false</security-enabled>
    <acceptors>
      <acceptor name="artemis">tcp://{}:{}?protocols=AMQP,CORE,OPENWIRE</acceptor>
    </acceptors>
    <address-settings>
      <address-setting match="#">
        <default-address-routing-type>ANYCAST</default-address-routing-type>
      </address-setting>
    </address-settings>
  </core>
</configuration>
"""

def main():
    enable_logging("warn")

    if which("artemis") is None:
        exit("The 'artemis' command is not on the path")

    if len(ARGS) == 1:
        run("artemis version")
        run("java -version")
        exit()

    kwargs = parse_keyword_args(ARGS[1:])

    host = kwargs["host"]
    port = kwargs["port"]
    path = kwargs["path"]
    ready_file = kwargs["ready-file"]

    config = config_template.format(host, port, path, path).lstrip()

    with temp_file() as config_file:
        write(config_file, config)

        start(f"artemis run --broker {config_file}")
        await_port(port)

        if ready_file != "-":
            write(ready_file, "ready\n")

        while True:
            sleep(2)

try:
    main()
except KeyboardInterrupt:
    pass
